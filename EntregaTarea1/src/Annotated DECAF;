grammar DECAF;

// KEYWORDS
CLASS  :                'class';
STRUCT :                'struct';
TRUE   :                'true';
FALSE  :                'false';
INT    :                'int';
IF     :                'if';
ELSE   :                'else';
WHILE  :                'while';
RETURN :                'return';
CHAR   :                'char';
BOOLEAN:                'boolean';
VOID   :                'void';
SCAN   :                'scan';
PRINT  :                'print';
PROGRAM:                'Program';

// TOKENS
fragment LETTER:    ('a'..'z' | 'A'..'Z');
WS             :    [ \t\r\n]+ ->   channel(HIDDEN);//Whitespace declaration    
fragment DIGIT :    ('0'..'9');
CHR            :    '\''(LETTER|DIGIT|' '|EXC|'"'|'#'|'$'|'%'|'^'|'&'|'*'|LPARENT|RPARENT|PLUS|'_'|MINUS|'?'|'\''|'.'|','|'<'|'>'|':'|';'|'`'|'~'|'@'|'\"') '\''; 
ID             :    LETTER(DIGIT|LETTER)*;
NUM            :    (DIGIT)+;
STRING         :    '\"'(LETTER|DIGIT|' '|EXC|'"'|'#'|'$'|'%'|'^'|'&'|'*'|LPARENT|RPARENT|PLUS|'_'|MINUS|'?'|'\''|'.'|','|'<'|'>'|':'|';'|'`'|'~'|'@'|'\"'|[\s])+'\"';
COMMENT        :    '//'(~('\r'|'\n'))*{skip();};
COMA           :    ','; 
AND            :    '&&';
OR             :    '||';
LBRACE         :    '{';
RBRACE         :    '}';
DOTCOMMA       :    ';';
RCORCH         :    ']';
LCORCH         :    '[';
LPARENT        :    '(';
RPARENT        :    ')';
EQ             :    '=';
DOT            :    '.';
PLUS           :    '+';
MINUS          :    '-';
EXC            :    '!';
AST            :    '*';
SLSH           :    '/';
PRCNT          :    '%';
MTHAN          :    '>';
LTHAN          :    '<';
EQMTHAN        :    '>=';
EQLTHAN        :    '<=';
EQEQ           :    '==';
NOTEQ          :    '!=';

// PRODUCTIONS

/**
 * Semantic action [PRE]: crear tabla de simbolos para ambito
 *
 * Semantic rule [POST]: El programa debe contener una definición de un método main sin parámetros, en donde se empezará la ejecución del programa
 */
program             : CLASS PROGRAM ID LBRACE (declaration)* RBRACE;

declaration         : structDeclaration
                        | varDeclaration
                        | methodDeclaration;

/**
 * [POST] Semantic rule: Ningún identificador de tipo 'variable' es declarado dos veces en el mismo ámbito
 */
varDeclaration      : varType ID DOTCOMMA               # alksdj
                        | varType ID LCORCH NUM RCORCH DOTCOMMA ; /* [POST] Semantic rule: NUM debe ser mayor a 0 */

/**
 * [PRE] Semantic action: crear tabla de simbolos para ambito
 *
 * [POST] Semantic action: regresar tabla de símbolos
 * [POST] Semantic rule: Ningún identificador de tipo 'structure' es declarado dos veces en el mismo ámbito
 */
structDeclaration   : STRUCT ID LBRACE (varDeclaration)* RBRACE;

varType             : (INT | CHAR | BOOLEAN | (STRUCT ID) | structDeclaration | VOID);

/**
 * [PRE] Semantic action: crear tabla de simbolos para ambito
 *
 * [MID] Antes de descender a block, instanciar simbolo
 *
 * [POST] Semantic action: regresar tabla de símbolos
 * [POST] Registrar en la tabla de simbolos actual el método actual
 * [POST] Semantic rule: Ningún identificador de tipo 'method' es declarado dos veces en el mismo ámbito
 */
methodDeclaration   : methodType ID LPARENT (parameter(COMA parameter)*)? RPARENT block;

methodType          : INT 
                     | CHAR 
                     | BOOLEAN 
                     | VOID;

/**
 * [POST] Semantic rule: Ningún identificador de tipo 'variable' es declarado dos veces en el mismo ámbito
 */
parameter           : parameterType ID 
                     | parameterType ID LCORCH RCORCH;
parameterType       : INT
                     | CHAR
                     | BOOLEAN ;
block               : LBRACE (varDeclaration)* (statement)* RBRACE ;
statement           : myIf
                     | returnBlock
                     | whileBlock
                     | methodCall DOTCOMMA
                     | assignation
                     | expression DOTCOMMA
                     | print;

/**
 * Semantic rule: Los tipos de los operandos debe de ser int, char o boolean y deben de ser del mismo tipo 
 */
assignation         : location EQ (expression ) DOTCOMMA ;

/**
 * Semantic rule: El tipo de if y while debe de ser boolean 
 */
whileBlock          :  WHILE LPARENT expression RPARENT block ;

/**
 * TODO: Determinar si puedo hacer llegar el symbol del método a este punto
 *
 * [POST] Semantic rule: Si el tipo de metodo es void no debe llevar valor de retorno
 * [POST] Semantic rule: El tipo de retorno tiene que ser el mmismo que el tipo de metodo
 */
returnBlock         : RETURN (nExpression) DOTCOMMA ;


print               : PRINT LPARENT ( STRING | location ) RPARENT DOTCOMMA;

/**
 * Semantic rule: El tipo de if y while debe de ser boolean 
 */
myIf                : IF LPARENT expression RPARENT block(ELSE block)?;
location            : declaredVariable | dotLocation;
dotLocation         : variable ( DOT location) 
                     | arrayVariable ( DOT location);
declaredVariable    : variable 
                     | arrayVariable;

/**
 * [POST] Semantic rule: Ningun identificador de tipo 'variable' es utilizado antes de ser declarado
 *
 * Semantic rule: si se tiene un arrayVariable, id debe ser un arreglo y el tipo debe der int. 
 */
variable            : ID;
arrayVariable       : ID LCORCH expression RCORCH ;

expressionInP       : LPARENT expression RPARENT ;
nExpression         : expression | ;

/**
 * Semantic rule: Los tipos de los operandos debe de ser boolean
 */
expression          : andExpression 
                    | expression OR andExpression;

/**
 * Semantic rule: Los tipos de los operandos debe de ser boolean
 */
andExpression       : equalsExpression 
                    | andExpression AND equalsExpression;

/**
 * Semantic rule: Los tipos de los operandos debe de ser int, char o boolean y deben de ser del mismo tipo 
 */
equalsExpression    : relationExpression 
                    | equalsExpression eq_op relationExpression;
/**
 * Semantic rule: Los tipos de los operandos debe de ser int  
 */
relationExpression  : addSubsExpression 
                    | relationExpression rel_op addSubsExpression;

/**
 * Semantic rule: Los tipos de los operandos debe de ser int  
 */
addSubsExpression   : mulDivExpression 
                    | addSubsExpression arith_op mulDivExpression;

/**
 * Semantic rule: Los tipos de los operandos debe de ser int  
 */
mulDivExpression    : prExpression 
                    | mulDivExpression md_op prExpression;
prExpression        : basicExpression 
                    | prExpression pr_op basicExpression;
basicExpression     : LPARENT (INT|CHAR) RPARENT basic 
                    | MINUS basic 
                    | EXC basic 
                    | basic;

basic               : expressionInP 
                    | location 
                    | methodCall /* [POST] Semantic rule: methodCall tiene que devolver algo, su type no puede ser 'void' */
                    | literal;

arg                 : expression;

/**
 * [POST] Semantic rule: El número y tipos de argumentos en la llamada a un método deben de ser los mismos que los ya declarados.
 *
 * Semantic rule: Ningun identificador de tipo 'method' es utilizado antes de ser declarado 
 */
methodCall          : ID LPARENT (arg(COMA arg)*)? RPARENT;


arith_op            : PLUS | MINUS;
md_op               : AST | SLSH ;
pr_op               : PRCNT;
rel_op              : LTHAN | MTHAN | EQLTHAN | EQMTHAN ;
eq_op               : EQEQ | NOTEQ;
cond_op             : AND | OR;

literal             : int_literal | char_literal | bool_literal;

int_literal         : NUM;

char_literal        : CHR;

bool_literal        : TRUE | FALSE;
